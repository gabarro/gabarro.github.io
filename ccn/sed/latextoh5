#!/usr/bin/env lua5.3

-- lua filter for converting (a subset of) LaTeX into HTML5 with mathjax
-- Basic idea: leave the math to matjax and search&replace simple sectioning
-- Note that this does not really parse the LaTeX source, it only performs
-- a line-based pattern matching

-- read whole input file into a string
whole_file = io.read("*all")

-- extract title and other data
metadata_title = whole_file:match("^\\title{(.-)}")
metadata_maths = false

-- table of global substitutions (could be implemented in sed)
global_substitutions = {
	-- remove comments (TODO: keep some of them as html comments)
	{"%%[^\n]+\n", "\n"},

	-- change a few character entities
	{"<", "&lt;"},
	{">", "&gt;"},
	{"~", "&nbsp;"},

	-- change \emph{...} to <i>...</i> (and similar inline stuff)
	{"\\emph{(.-)}", "<i>%1</i>"},
	{"\\textbf{(.-)}", "<b>%1</b>"},
	{"\\textit{(.-)}", "<i>%1</i>"},
	{"\\texttt{(.-)}", "<code>%1</code>"},
	{"{\\it (.-)}", "<i>%1</i>"},
	{"{\\bf (.-)}", "<b>%1</b>"},
	{"{\\tt (.-)}", "<code>%1</code>"},

	-- change \includegraphics{...} to <img src="...">
	{"\\includegraphics{(.-)}", "<img src=\"%1\">"},

	-- change \sections to <headers>
	{"\\title{(.-)}", "<h1>%1</h1>\n"},
	{"\\section{(.-)}", "<h2>%1</h2>\n"},
	{"\\subsection{(.-)}", "<h3>%1</h3>\n"},

	-- list environments (TODO: support for \item[] )
	{"\\item ", "<li>" },
	{"\\begin{enumerate}", "<ol>"},
	{"\\end{enumerate}", "</ol>"},
	{"\\begin{itemize}", "<ul>"},
	{"\\end{itemize}", "</ul>"},
	{"\\begin{verbatim}", "<pre>"},
	{"\\end{verbatim}", "</pre>"},

	-- theorem environments
	{"\\begin{definition}",
		"<div class=\"definition\"><b>Definition.</b><em>"},
	{"\\begin{proposition}",
		"<div class=\"proposition\"><b>Proposition</b><em>"},
	{"\\begin{lemma}", "<div class=\"lemma\"><b>Lemma</b><em>"},
	{"\\begin{theorem}", "<div class=\"theorem\"><b>Theorem</b><em>"},
	{"\\begin{remark}", "<div class=\"remark\"><b>Remark</b><em>"},
	{"\\end{definition}", "</em></div>"},
	{"\\end{proposition}", "</em></div>"},
	{"\\end{lemma}", "</em></div>"},
	{"\\end{theorem}", "</em></div>"},
	{"\\end{remark}", "</em></div>"},
}

-- perform the global substitutions
for _,s in pairs(global_substitutions) do
	whole_file = whole_file:gsub(s[1], s[2])
end

output_template = [[
<!doctype html>
<meta charset="utf-8" />
<title>TITLE</title>
JAXCODE
]]

boilerplate_mathjax = [[
<script type="text/x-mathjax-config">
	MathJax.Hub.Config({
		tex2jax: {
			inlineMath: [ ['$','$'], ['\\(','\\)'] ],
			processEscapes: true
		}
	});
</script>
<script type="text/javascript" async
	src="https://cdn.rawgit.com/mathjax/MathJax/2.7.1/MathJax.js?config=TeX-AMS_CHTML-full">
</script>
]]

if whole_file:match("%$") then  -- TODO: perform a more intelligent check here
	metadata_maths = true
end
if not metadata_maths then boilerplate_mathjax = "" end

output_template = output_template:gsub("TITLE", metadata_title)
output_template = output_template:gsub("JAXCODE", boilerplate_mathjax)

-- start building output file
output_lines = { output_template }
table.insert(output_lines, "\n")

-- line by line treatment

counter_sec = 1
counter_ssec = 1
couter_enum = 1 -- TODO: deal with enum depth

previous_line = ""
for l in string.gmatch(whole_file, "[^\n]-\n") do
	u = l    -- line to add to the output (the same, by default)

	-- if a paragraph starts, put <p>
	if previous_line == "\n" and (
			l:match("^[A-Z][^\n]-\n")
			or
			l:match("^<img[^\n]-\n")
		)
		then
		u = "<p>\n"..u
	end

	table.insert(output_lines, u)
	previous_line = l
end

for _,l in pairs(output_lines) do
	if not l:match("^\n$") then
		io.stdout:write(l)
	end
end
